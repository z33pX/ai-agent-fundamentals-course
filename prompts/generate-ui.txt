You are a world class python coder, an expert from Stanford. You have been asked to summarize a section for a research to answer one specific question by generating UI components and their content. You have a set of Python UI components at your disposal:

Components:

## JSON Schema for Text Component
### Fields:
- text: The main text content for this component

### Example:
```python
ui_components.append({
    "type": "text",
    "props": {
        "text": "Hello World!"
    }
})
```

## JSON Schema for Charts
### General JSON Chart Schema
{
  "type": "chart",
  "props": {
    "chart_type": "string",
    "data": "array",
    "xaxis": "array",
    "name": "string",
    "chart_title": "string"
  }
}

### Donut, Pie, Polar Area, Radial Bar, Bar, Horizontal Bar, Stacked Bar, Line Area, Line, Radar, Heatmap Charts
#### Fields:
- chart_type: Type of the chart. Available options are "donut", "pie", "heatmap", "radar", "polarArea", "radialBar", "bar-horizontal", "bar-stacked", "bar", "line-area", "line", "candlestick", "treemap", "scatter"
- data: List of data series (or datapoints for donut and pie)
- xaxis: List of labels for each data point
- name: Legend for the chart (only for data series)
- chart_title: Title of the chart

#### Example:
```python
ui_components.append({
    "type": "chart",
    "props": {
        "chart_type": "bar",  # or "donut", "pie", "heatmap", "radar", "polarArea", "radialBar", "bar-horizontal", "bar-stacked", "line-area", "line" etc.
        "data": [{"data": [10, 20, 30], "name": "Series 1"}],
        "xaxis": ["Jan", "Feb", "Mar"],
        "chart_title": "Bar Chart Title"
    }
})
```

### Candlestick Chart
#### Fields:
- chart_type: "candlestick"
- data: List of [open, high, low, close] data points
- xaxis: List of labels for each data point
- chart_title: Title of the chart

#### Example:
```python
ui_components.append({
    "type": "chart",
    "props": {
        "chart_type": "candlestick",
        "data": [[20, 30, 10, 25], [40, 50, 30, 45]],
        "xaxis": ["Jan", "Feb"],
        "chart_title": "Candlestick Chart Title"
    }
})
```

### Treemap Chart
#### Fields:
- chart_type: "treemap"
- data: List of datapoints
- xaxis: List of labels for each data point
- chart_title: Title of the chart

#### Example:
```python
ui_components.append({
    "type": "chart",
    "props": {
        "chart_type": "treemap",
        "data": [100, 200, 300],
        "xaxis": ["Item 1", "Item 2", "Item 3"],
        "chart_title": "Treemap Chart Title"
    }
})
```

### Scatter Chart
#### Fields:
- chart_type: "scatter"
- data: List of data series with each series having a list of [x, y] points
- xaxis: List of labels for each data point
- chart_title: Title of the chart

#### Example:
```python
ui_components.append({
    "type": "chart",
    "props": {
        "chart_type": "scatter",
        "data": [{"data": [[10, 20], [30, 40]], "name": "Series 1"}],
        "xaxis": ["Jan", "Feb"],
        "chart_title": "Scatter Chart Title"
    }
})
```

### Example Usage for Different Chart Types
Each chart type follows the same pattern for creating the ui_component_dict with the corresponding chart_type, data, xaxis, name, and chart_title fields.

## JSON Schema for Image Component
### Fields:
- url: The URL of the image

### Example:
```python
ui_components.append({
    "type": "image",
    "props": {
        "url": "https://example.com/image.jpg"
    }
})
```

## JSON Schema for YouTube Video Component
### Fields:
- video_id: The ID of the YouTube video

### Example:
```python
ui_components.append({
    "type": "youtube_video",
    "props": {
        "video_id": "xyz123"
    }
})
```

The data you need to decide which UI components to generate and to fill with content:
{{input_str}}

User prompt for the summary: 
{{user_prompt}}

Instructions:
- Only use the components provided above.
- You can use every component multiple times.
- Use images when a url is provided.
- Use youtube videos when a video_id is provided.
- Use ui_components to add new components.
- Always include urls like [name](url) for references in text ui components.
- Don't add the code itself or other code explanations as a part of the UI.
- Use markup to format the text component with bullet points and **bold** text.
- Be concise and quote as many numbers and facts as possible. 
- Don't just copy the data. Answer the research question.
- Use charts only when you have to put multiple datapoints in relationship.
- It is important to include sources and references after each sentence or paragraph using Markup, like [1](https://www.example.com) in the text and in the list at the end of the summary with: 1: [link name](https://www.example.com).
- The code will be executed by a Jupyter notebook cell. Therefore, always end the code with the two lines:
result = ui_components
result

Now, complete the code below to generate the UI:
```python
ui_components = []

# Add your UI components here:
